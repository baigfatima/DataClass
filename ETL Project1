{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import json\n",
    "import ast\n",
    "import csv\n",
    "from sqlalchemy import create_engine\n",
    "import sqlalchemy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Connect to local database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "rds_connection_string = \"root:root@127.0.0.1/movie_db\"\n",
    "engine = create_engine(f'mysql://{rds_connection_string}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Defining Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean(x):\n",
    "        if hasattr(x, '__iter__'):\n",
    "            return ''.join([i if 32 < ord(i) < 128 else \" \" for i in x])\n",
    "        else:\n",
    "            return x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Movies Metadata"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "importing the csv file & creating the DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "adult                    45466\n",
       "belongs_to_collection    45466\n",
       "budget                   45466\n",
       "genres                   45466\n",
       "homepage                 45466\n",
       "id                       45466\n",
       "imdb_id                  45466\n",
       "original_language        45466\n",
       "original_title           45466\n",
       "overview                 45466\n",
       "popularity               45463\n",
       "poster_path              45463\n",
       "production_companies     45463\n",
       "production_countries     45463\n",
       "release_date             45463\n",
       "revenue                  45460\n",
       "runtime                  45460\n",
       "spoken_languages         45460\n",
       "status                   45460\n",
       "tagline                  45460\n",
       "title                    45460\n",
       "video                    45460\n",
       "vote_average             45460\n",
       "vote_count               45460\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "csv_file = \"movies_dataset/movies_metadata.csv\"\n",
    "df = open(csv_file,encoding=\"utf-8\")\n",
    "reader=csv.DictReader(df)\n",
    "movies_metadata_df =(pd.DataFrame(list(reader)))\n",
    "movies_metadata_df.count()\n",
    "movies_metadata_df=movies_metadata_df.applymap(clean)\n",
    "movies_metadata_df.head()\n",
    "movies_metadata_df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#clean the dataFrame & removing unwanted columns\n",
    "new_movies_metadata_df=movies_metadata_df[['id','imdb_id','budget','adult','original_language','original_title','title','overview','popularity','release_date','revenue','runtime','status','tagline','video','vote_average','vote_count']]\n",
    "new_movies_metadata_df=new_movies_metadata_df.rename(columns={'id':'tmdbid'})\n",
    "new_movies_metadata_df=new_movies_metadata_df.drop_duplicates(subset=\"tmdbid\")\n",
    "new_movies_metadata_df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create \"movies\" table in MySQl \n",
    "new_movies_metadata_df.to_sql(name='movies', con=engine, if_exists='replace',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Assign primary key to \"tmdbid\" & delete bad rows\n",
    "with engine.begin() as conn:\n",
    "    conn.execute('delete from movies where tmdbid=1997 or tmdbid=2012 or tmdbid=2014')\n",
    "    conn.execute('ALTER TABLE  movies MODIFY tmdbid varchar(20) primary key')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Credits "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "csv_file = \"movies_dataset/credits.csv\"\n",
    "df = open(csv_file,encoding=\"utf-8\")\n",
    "reader=csv.DictReader(df)\n",
    "credits_df=pd.DataFrame(list(reader))\n",
    "print(credits_df.count())\n",
    "credits_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert \"cast\" dictionary to List\n",
    "cast=[]\n",
    "for index,row in credits_df.iterrows():\n",
    "    temp_cast=ast.literal_eval(row['cast'])\n",
    "    for c in temp_cast:\n",
    "        c['tmdbid']=row['id']\n",
    "    cast.extend(temp_cast)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cast_df=pd.DataFrame(cast)\n",
    "print(cast_df.count())\n",
    "cast_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_cast_df=cast_df[['cast_id','character','credit_id','gender','id','tmdbid','name','order','profile_path']].copy()\n",
    "new_cast_df=new_cast_df.drop_duplicates(subset=\"credit_id\")\n",
    "new_cast_df=new_cast_df.applymap(clean)\n",
    "new_cast_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_cast_df.to_sql(name='cast', con=engine, if_exists='replace',index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Assign primary key to \"credit_id\" & foreign key to \"tmdb\" references to table \"movies\"\n",
    "with engine.begin() as conn:\n",
    "    conn.execute('ALTER TABLE cast MODIFY credit_id varchar(50) primary key')\n",
    "    conn.execute('delete from cast where tmdbid not in (select tmdbid from movies)')\n",
    "    conn.execute('ALTER TABLE cast modify tmdbid varchar(20), ADD FOREIGN KEY (tmdbid) REFERENCES movies(tmdbid)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "pd.read_sql_query('select * from cast', con=engine)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Crew"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert \"cast\" dictionary to List\n",
    "crew=[]\n",
    "for index,row in credits_df.iterrows():\n",
    "    temp_crew=ast.literal_eval(row['crew'])\n",
    "    for c in temp_crew:\n",
    "        c['tmdbid']=row['id']\n",
    "    crew.extend(temp_crew)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "crew_df=pd.DataFrame(crew)\n",
    "print(crew_df.count())\n",
    "crew_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "crew_df=crew_df.drop_duplicates(subset=\"credit_id\")\n",
    "crew_df=crew_df.applymap(clean)\n",
    "crew_df.count()\n",
    "crew_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "crew_df.to_sql(name='crew', con=engine, if_exists='replace',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Assign primary key to \"credit_id\" & foreign key to \"tmdb\" references to table \"movies\"\n",
    "with engine.begin() as conn:\n",
    "    conn.execute('delete from crew where tmdbid not in (select tmdbid from movies)')\n",
    "    conn.execute('ALTER TABLE crew MODIFY credit_id varchar(50) primary key')\n",
    "    conn.execute('ALTER TABLE crew modify tmdbid varchar(20), ADD FOREIGN KEY (tmdbid) REFERENCES movies(tmdbid)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Keywords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id          46419\n",
      "keywords    46419\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       " ...
